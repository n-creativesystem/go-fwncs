package sessions

import (
	"fmt"
	"net/http"

	gsessions "github.com/gorilla/sessions"
	"github.com/n-creativesystem/go-fwncs"
)

type Store interface {
	gsessions.Store
	Options(Options)
	Logger(fwncs.ILogger)
}

type Session interface {
	// ID of the session, generated by stores. It should not be used for user data.
	ID() string
	// Get returns the session value associated to the given key.
	Get(key interface{}) interface{}
	// Set sets the session value associated to the given key.
	Set(key interface{}, val interface{})
	// Delete removes the session value associated to the given key.
	Delete(key interface{})
	// Clear deletes all values in the session.
	Clear()
	// AddFlash adds a flash message to the session.
	// A single variadic argument is accepted, and it is optional: it defines the flash key.
	// If not defined "_flash" is used by default.
	AddFlash(value interface{}, vars ...string)
	// Flashes returns a slice of flash messages from the session.
	// A single variadic argument is accepted, and it is optional: it defines the flash key.
	// If not defined "_flash" is used by default.
	Flashes(vars ...string) []interface{}
	// Options sets configuration for a session.
	Options(Options)
	// Save saves all sessions used during the current request.
	Save() error
}

type sessionMap map[string]Session

const (
	SessionStoreName = "session_store"
	errorFormat      = "[sessions] ERROR! %s\n"
)

func Sessions(name string, store Store) fwncs.HandlerFunc {
	return func(c fwncs.Context) {
		store.Logger(c.Logger())
		s := &session{name: name, request: c.Request(), store: store, session: nil, written: false, writer: c.Writer(), log: c.Logger()}
		c.Set(SessionStoreName, s)
		c.Next()
	}
}

func SessionsMany(names []string, store Store) fwncs.HandlerFunc {
	return func(c fwncs.Context) {
		sessions := make(sessionMap, len(names))
		for _, name := range names {
			sessions[name] = &session{name: name, request: c.Request(), store: store, session: nil, written: false, writer: c.Writer(), log: c.Logger()}
		}
		c.Set(SessionStoreName, sessions)
		c.Next()
	}
}

func Default(c fwncs.Context) Session {
	return c.Get(SessionStoreName).(Session)
}

func DefaultMany(c fwncs.Context, name string) Session {
	mp := c.Get(SessionStoreName).(sessionMap)
	return mp[name]
}

type session struct {
	name    string
	request *http.Request
	store   Store
	session *gsessions.Session
	written bool
	writer  http.ResponseWriter
	log     fwncs.ILogger
}

func (s *session) ID() string {
	return s.Session().ID
}

func (s *session) Get(key interface{}) interface{} {
	return s.Session().Values[key]
}

func (s *session) Set(key interface{}, val interface{}) {
	s.Session().Values[key] = val
	s.written = true
}

func (s *session) Delete(key interface{}) {
	delete(s.Session().Values, key)
	s.written = true
}

func (s *session) Clear() {
	for key := range s.Session().Values {
		s.Delete(key)
	}
}

func (s *session) AddFlash(value interface{}, vars ...string) {
	s.Session().AddFlash(value, vars...)
	s.written = true
}

func (s *session) Flashes(vars ...string) []interface{} {
	s.written = true
	return s.Session().Flashes(vars...)
}

func (s *session) Options(options Options) {
	s.Session().Options = options.ToGorillaOptions()
}

func (s *session) Save() error {
	if s.Written() {
		e := s.Session().Save(s.request, s.writer)
		if e == nil {
			s.written = false
		}
		return e
	}
	return nil
}

func (s *session) Session() *gsessions.Session {
	if s.session == nil {
		var err error
		s.session, err = s.store.Get(s.request, s.name)
		if err != nil {
			s.log.Error(fmt.Errorf(errorFormat, err))
		}
	}
	return s.session
}

func (s *session) Written() bool {
	return s.written
}
